love.window.setTitle(' Rolling ball ')

canw     = 1000
canh     = 650

max_balls = 5
num_balls = 5
current_ball = 4
start_time = os.time()
level = 1

function reset()
  num_balls = max_balls
  current_ball = max_balls-1
  start_time = os.time()

  for i=0,current_ball-1 do 
    ball.body:setPosition(50*(i+1), 50)
    ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end

  activateBall(objects.ball[current_ball]);
  
end

function newBall(index)
  ball = {}
  ball.body = love.physics.newBody(world, 50*(index+1), 50, "dynamic") --make it dynamic, so it can move around
  ball.shape = love.physics.newCircleShape(20) --the ball's shape has a radius of 20
  ball.fixture = love.physics.newFixture(ball.body, ball.shape, 1) -- Attach fixture to body and give it a density of 1.


  return ball
end

function activateBall(ball)
  ball.body:setPosition(650/2, 650/2)
  ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  ball.fixture:setRestitution(0.9) --let the ball bounce

end

function ballOffScreen(ball)
  return (ball.body:getY() < 0) or (ball.body:getX() < 0) or (ball.body:getY() > canh) or (ball.body:getX() > canw)
end

function love.load()
  

  love.physics.setMeter(64) --the height of a meter our worlds will be 64px
  world = love.physics.newWorld(0, 9.81*64, true) --create a world for the bodies to exist in with horizontal gravity of 0 and vertical gravity of 9.81
 
  font = love.graphics.setNewFont("Blogger Sans-Bold.otf", 30) 

  objects = {} -- table to hold all our physical objects
 
  --let's create the ground
  objects.ground = {}
  objects.ground.body = love.physics.newBody(world, canw-canw, (canh/2)) --remember, the shape (the rectangle we create next) anchors to the body from its center, so we have to move it to (650/2, 650-50/2)
  --objects.ground.shape = love.physics.newRectangleShape(canw, 50) --make a rectangle with a width of 650 and a height of 50
  objects.ground.shape = love.physics.newPolygonShape(0, canh/2, 50, (canh/2)-50, (canw/2), (canh/2)-52, canw-50, (canh/2)-50, canw, canh/2) 
  objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape); --attach shape to body

  --shelf to keep your spare balls on
  objects.shelf = {}
  objects.shelf.body = love.physics.newBody(world, 5, 52) --remember, the shape (the rectangle we create next) anchors to the body from its center, so we have to move it to (650/2, 650-50/2)
  objects.shelf.shape = love.physics.newRectangleShape(50+(max_balls) * 80, 5) --make a rectangle with a width to carry all the balls
  objects.shelf.fixture = love.physics.newFixture(objects.shelf.body, objects.shelf.shape); --attach shape to body

 
  objects.ball = {}
  --let's create a ball
  objects.ball[0] = newBall(0)
  objects.ball[1] = newBall(1)
  objects.ball[2] = newBall(2)
  objects.ball[3] = newBall(3)
  objects.ball[4] = newBall(4)

  activateBall(objects.ball[current_ball])

 
  --let's create a couple blocks to play around with
  objects.block1 = {}
  objects.block1.body = love.physics.newBody(world, 200, 550, "dynamic")
  objects.block1.shape = love.physics.newRectangleShape(0, 0, 50, 100)
  objects.block1.fixture = love.physics.newFixture(objects.block1.body, objects.block1.shape, 3) -- A higher density gives it more mass.
 
  objects.block2 = {}
  objects.block2.body = love.physics.newBody(world, 200, 400, "dynamic")
  objects.block2.shape = love.physics.newRectangleShape(0, 0, 100, 50)
  objects.block2.fixture = love.physics.newFixture(objects.block2.body, objects.block2.shape, 5)

  objects.block3 = {}
  objects.block3.body = love.physics.newBody(world, 200, 400, "dynamic")
  objects.block3.shape = love.physics.newRectangleShape(0, 0, 100, 50)
  objects.block3.fixture = love.physics.newFixture(objects.block3.body, objects.block3.shape, 3)

  objects.block4 = {}
  objects.block4.body = love.physics.newBody(world, 200, 400, "dynamic")
  objects.block4.shape = love.physics.newRectangleShape(0, 0, 100, 50)
  objects.block4.fixture = love.physics.newFixture(objects.block4.body, objects.block4.shape, 5)

 
--initial graphics setup
  love.graphics.setBackgroundColor(31, 53, 97) --set the background color to a nice blue
  love.window.setMode(canw, canh) --set the window dimensions to 650 by 650
end
 
 
function love.update(dt)
  world:update(dt) --this puts the world into motion
 
  --here we are going to create some keyboard events
  if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    objects.ball[current_ball].body:applyForce(400, 0)
  elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
    objects.ball[current_ball].body:applyForce(-400, 0)
  elseif love.keyboard.isDown("return") then --press the up arrow key to set the ball in the air
    current_ball = (current_ball - 1)
    if (current_ball < 0) then
      reset()
    else
      activateBall(objects.ball[current_ball])
    end
--    objects.ball[current_ball].body:setPosition(650/2, 650/2)
--    objects.ball[current_ball].body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  elseif love.keyboard.isDown("up") then --press the up arrow key to push the ball up higher
    objects.ball[current_ball].body:applyForce(0, -200)
  elseif love.keyboard.isDown("down") then --press the up arrow key to push the ball up higher
    objects.ball[current_ball].body:applyForce(0, 200)
  end
end
 
function love.draw()
  love.graphics.setColor(28, 63, 5) -- set the drawing color to green for the ground
  love.graphics.polygon("fill", objects.ground.body:getWorldPoints(objects.ground.shape:getPoints())) -- draw a "filled in" polygon using the ground's coordinates

  love.graphics.setColor(30, 50, 90) -- set the drawing color for the shelf
  love.graphics.polygon("fill", objects.shelf.body:getWorldPoints(objects.shelf.shape:getPoints())) 

 
  love.graphics.setColor(76, 18, 5) --set the drawing color to red for the ball
  for i=0,current_ball do 
    love.graphics.circle("fill", objects.ball[i].body:getX(), objects.ball[i].body:getY(), objects.ball[i].shape:getRadius())
  end
 
  love.graphics.setColor(20, 20, 20) -- set the drawing color to grey for the blocks
  love.graphics.polygon("fill", objects.block1.body:getWorldPoints(objects.block1.shape:getPoints()))
  love.graphics.polygon("fill", objects.block3.body:getWorldPoints(objects.block3.shape:getPoints()))

  love.graphics.setColor(10, 10, 10) -- set the drawing color to grey for the blocks - lighter block, not so heavy
  love.graphics.polygon("fill", objects.block2.body:getWorldPoints(objects.block2.shape:getPoints()))
  love.graphics.polygon("fill", objects.block4.body:getWorldPoints(objects.block4.shape:getPoints()))

  if (ballOffScreen(objects.ball[current_ball])) and (current_ball > 0) then
    love.graphics.setColor(255, 255, 250) 
    love.graphics.print("Oops, press ENTER to get a new ball", canw/4, canh/2) 
  end

  if (os.difftime(os.time(),start_time) < 6) then
    love.graphics.setColor(255, 255, 250) 
    love.graphics.print("Knock all the blocks off the screen", canw/4, canh/4) 
  end
  if (os.difftime(os.time(),start_time) < 10) and (os.difftime(os.time(),start_time) > 5) then  
    love.graphics.setColor(255, 255, 250) 
    love.graphics.print("without losing your ball!", canw/4, canh/3) 
  end

  love.graphics.setColor(179, 179, 230)
  love.graphics.print("Level " .. tostring(level), 3*(canw/4), 50) 



end

